#ifndef MAZEGEN_H
#define MAZEGEN_H
#include <vector>
using namespace std;

// Declare the maze template //This one has dimentions [31][41]
const vector<vector<char>>  mazeTemplate = {
    // Top border
    {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', 'C', '#', '*'},
    {'*', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '*'},
    {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}
};//end mazeTemplate

//maze generator functions
void generateMaze();        //Generate the maze
vector<vector<char>> copyMazeTemplate();
vector<vector<char>> mazeGetter();
vector<pair<int, int>> getStartPositions();
void generateStartAndEnd(vector<vector<char>>& maze);
void renderMaze(const vector<vector<char>>& maze);
bool isValidCell(int row, int col, char element, const vector<vector<char>>& maze);
bool inFrontier(int row, int col, const vector<pair<int, int>>& frontier);
//variables


#endif // MAZEGEN_H
